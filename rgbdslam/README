Last Modification: 2012-01-18 

PREAMBLE #######################################################################

This release of RGBDSLAM succeeds our entry at the ROS 3D contest
(see http://www.ros.org/wiki/openni/Contests/ROS%203D). 

There have been many changes, mainly
- Performance improvments w.r.t accuracy and robustness of registration
- Performance improvments w.r.t computation time
- A more convenient user interface with internal visualization
- Convenience features like saving to pcd/ply file, node deletion and many more
- Use of g2o as SLAM Backend (formerly hogman)
- The ability to run without graphics card/X-Server



INSTALLATION ###################################################################

The following instructions assume you have ROS Diamondback installed in the
Desktop-Full configuration.  Otherwise please refer to
http://www.ros.org/wiki/ROS/Installation for instructions how to install ROS.
RGBDSLAM has been developed and tested on Ubuntu only.


Install openni-kinect. On ubuntu use the package manager: 
$ sudo aptitude install ros-electric-openni-kinect

If you don't have a personal ros directory in your home directory, 
create one (e.g. mkdir ~/ros) and add it to your ROS_PACKAGE_PATH
(e.g. echo 'export ROS_PACKAGE_PATH=~/ros:$ROS_PACKAGE_PATH' >> ~/.bashrc )

Change to your personal ros directory (cd ~/ros), then check out g2o 
$ svn co https://code.ros.org/svn/ros-pkg/stacks/vslam/trunk/g2o

To make g2o and install its system dependencies use
rosmake --rosdep-install
If that fails to resolve the system dependencies use (on ubuntu) 
$ sudo aptitude install libsuitesparse-dev libcsparse2.2.3 

Checkout the RGBDSLAM source code (also into the personal ros dir)
$ svn co http://alufr-ros-pkg.googlecode.com/svn/trunk/rgbdslam_freiburg/rgbdslam

Compile rgbdslam and dependencies: 
$ rosmake --rosdep-install rgbdslam

If this hangs try "roscd rgbdslam" and "make"

Optionally, you might want to install perception_pcl_addons (debian package:
ros-electric-perception-pcl-addons) which includes pcd_viewer, a viewer for
the file format used by RGBDSLAM to store registered point clouds. If you
want to process the point cloud you can save to a ply file and use meshlab 
(debian-package: meshlab).



USAGE with GUI #################################################################

To start RGBDSLAM launch
  roslaunch rgbdslam kinect+rgbdslam.launch

Alternatively you can start the openni nodes and RGBDSLAM separately, e.g.:
  roslaunch openni_camera openni_node.launch 
  rosrun rgbdslam rgbdslam

To capture models either press space to start recording a continuous stream
or press enter to record a single frame. To reduce data redundancy, sequential
frames from (almost) the same position are not included in the final model.
The 3D visualization always shows the globally optimized model. Neighbouring
points are triangulated except at missing values and depth jumps.



USAGE without GUI ##############################################################

The RosUI is an alternative to the Grapical_UI to run the rgbdslam headless,
for example on the PR2.  rgbdslam can then be used via service-calls.
The possible calls are:
- /rgbdslam/ros_ui {reset, quick_save, save_cloud, save_features, save_individual, save_trajectory, send_all, delete_frame}
- /rgbdslam/ros_ui_b {pause, record} {true, false}
- /rgbdslam/ros_ui_f {set_max} {float}

To start the rgbdslam headless use the headless.launch:
	roslaunch rgbdslam headless.launch

Capture single frames via:
	rosservice call /rgbdslam/ros_ui frame

Capture a stream of data:
	rosservice call /rgbdslam/ros_ui_b pause false

Send point clouds with computed transformations (e.g., to rviz or octomap_server):
	rosservice call /rgbdslam/ros_ui send_all

Save data using one of the following:

All pointclouds in one file quicksave.pcd in rgbdslam/bin-directory:
	rosservice call /rgbdslam/ros_ui save_cloud

Every pointcloud in its own file in rgbdslam/bin-directory:
	rosservice call /rgbdslam/ros_ui save_individual

/rgbdslam/ros_ui:
	-reset	resets the graph, delets all nodes (refreshes only when capturing new images)
	-quick_save, save_cloud	saves all pointclouds in one file quicksave.pcd in rgbdslam/bin-directory
  -save_features saves the feature locations and descriptors in a yaml file "feature_database.yml"
	-save_individual	saves every scan in its own file in rgbdslam/bin-directory
	-send_all	sends all pointclouds to /rgbdslam/transformed_cloud (can be visualized with rviz)
	-delete_frame	delete the last frame from the graph (refreshes only when capturing new images)
	
/rgbdslam/ros_ui_b:
	-pause	pauses or resumes the capturing of images
	-record	pauses or stops the recording of bag-files, can be found in the rgbdslam/bin-directory
	
/rgbdslam/ros_ui_f:
	-set_max	filters out all datapoints further away than this value (in cm, only for saving to files)



FURTHER HELP  ##################################################################

Here are some known issues:
1. If you have issues compiling, make sure you removed any older version 
   of RGBDSLAM from your $ROS_PACKAGE_PATH 
2. RGBDSLAM needs electric (it might work on diamondback, but we didn't test it there).
   Make sure that neither your $PATH nor $ROS_PACKAGE_PATH contains "boxturtle", "cturtle" 
   or "unstable".
3. If you are located in Germany and get errors loading the saved ply files 
   into meshlab, try switching to U.S. locale or replace the decimal point with
   a comma in your .ply file
4. To speed up compile times consider to use "export ROS_PARALLEL_JOBS=-j<#cpus>"
   before rosmake, but you should have lots of memory as gcc may take up to
   2GB for four parallel jobs.

If you have questions regarding installation or usage of RGBDSLAM please refer
to http://answers.ros.org/questions/?tags=RGBDSLAM
For further questions, suggestions, corrections of this README or to submit patches, 
please contact Felix Endres (endres@informatik.uni-freiburg.de)

Apart from this manual, detailed code documentation can be created using
rosdoc ("rosrun rosdoc rosdoc rgbdslam"), which will create a "doc" folder
in your current directory.



GICP AND SIFTGPU ###############################################################

If there are problems related to the compilation or linking of GICP or SIFTGPU,
you can deactivate these features at the top of CMakeLists.txt. You might get
even faster GPU features setting SIFT_GPU_MODE to 1 (CUDA) but you will need to
install proprietary drivers:
  SiftGPU uses (in our case) CUDA, which needs a new NVidia GPU (see
  http://www.nvidia.com/object/cuda_gpus.html).  For installing the development
  drivers and the CUDA SDK you can use the following tutorial:
  http://sublimated.wordpress.com/2011/03/25/installing-cuda-4-0-rc-on-ubuntu-10-10-64-bit/
  or for ubuntu 10.04:
  http://ubuntuforums.org/showthread.php?t=1625433 (tested on Ubuntu 10.04 x64)
  To use SiftGPU you should install "libdevil-dev".
  
  Additional compiling information can be changed in
  external/siftgpu/linux/makefile.

  GICP
  Generalized ICP can be (de)activated for refining the registration. For more
  information see http://stanford.edu/~avsegal/generalized_icp.html



LICENSE INFORMATION ############################################################

This software is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  The authors allow the users to use and modify the
source code for their own research. Any commercial application, redistribution,
etc has to be arranged between users and authors individually.

RGBDSLAM is licenced under GPL v.3.
